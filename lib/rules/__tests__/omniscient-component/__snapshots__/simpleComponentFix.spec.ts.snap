// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`simple component conversions should convert component with destructed props 1`] = `
Object {
  "fixed": true,
  "messages": Array [],
  "output": "import { Component } from 'react';
import { isEqualImmutable } from 'ImmutableComponent';

import component from 'omniscient';

class TestComponent extends Component {
    static displayName = \\"TestComponent\\";

    shouldComponentUpdate(nextProps, nextState) {
        return !(
            isEqualImmutable(this.props, nextProps) &&
            ((!oldState && !newState) ||
                isEqualImmutable(this.state, nextState))
        );
    }

    render() {
        const { a, b } = this.props;
        return <h1>{a}</h1>;
    }
}",
}
`;

exports[`simple component conversions should convert component with raw props 1`] = `
Object {
  "fixed": true,
  "messages": Array [],
  "output": "import { Component } from 'react';
import { isEqualImmutable } from 'ImmutableComponent';

import component from 'omniscient';

class TestComponent extends Component {
    static displayName = \\"TestComponent\\";

    shouldComponentUpdate(nextProps, nextState) {
        return !(
            isEqualImmutable(this.props, nextProps) &&
            ((!oldState && !newState) ||
                isEqualImmutable(this.state, nextState))
        );
    }

    render() {
        const props = this.props;
        return <h1>{props.name}</h1>;
    }
}",
}
`;

exports[`simple component conversions should convert render only component 1`] = `
Object {
  "fixed": true,
  "messages": Array [],
  "output": "import { Component } from 'react';
import { isEqualImmutable } from 'ImmutableComponent';

import component from 'omniscient';

class TestComponent extends Component {
    shouldComponentUpdate(nextProps, nextState) {
        return !(
            isEqualImmutable(this.props, nextProps) &&
            ((!oldState && !newState) ||
                isEqualImmutable(this.state, nextState))
        );
    }

    render() {
        return <h1>Test</h1>;
    }
}",
}
`;

exports[`simple component conversions should convert simple component to function when has memo 1`] = `
Object {
  "fixed": true,
  "messages": Array [],
  "output": "import { memo } from 'react';

import component from 'omniscient';

const TestComponent = memo(function TestComponent({ test }) {
    return <h1>{test}</h1>;
});
TestComponent.displayName = \\"TestComponent\\";",
}
`;

exports[`simple component conversions should convert simple component to function when has memo and pass areEqual 1`] = `
Object {
  "fixed": true,
  "messages": Array [],
  "output": "import { memo } from 'react';
import { isEqualImmutable } from 'ImmutableComponent';

import component from 'omniscient';

const TestComponent = memo(function TestComponent({ test }) {
    return <h1>{test}</h1>;
}, isEqualImmutable);
TestComponent.displayName = \\"TestComponent\\";",
}
`;

exports[`simple component conversions should convert simple pure component 1`] = `
Object {
  "fixed": true,
  "messages": Array [],
  "output": "import { Component } from 'react';
import { isEqualImmutable } from 'ImmutableComponent';

import component from 'omniscient';

class TestComponent extends Component {
    static displayName = \\"TestComponent\\";

    shouldComponentUpdate(nextProps, nextState) {
        return !(
            isEqualImmutable(this.props, nextProps) &&
            ((!oldState && !newState) ||
                isEqualImmutable(this.state, nextState))
        );
    }

    render() {
        return <h1>Test</h1>;
    }
}",
}
`;

exports[`simple component conversions should convert simple pure component to function when has memo 1`] = `
Object {
  "fixed": true,
  "messages": Array [],
  "output": "import { memo } from 'react';

import component from 'omniscient';

const TestComponent = memo(function TestComponent() {
    return <h1>Test</h1>;
});
TestComponent.displayName = \\"TestComponent\\";",
}
`;

exports[`simple component conversions should handle nameless components 1`] = `
Object {
  "fixed": true,
  "messages": Array [],
  "output": "import { Component } from 'react';
import { isEqualImmutable } from 'ImmutableComponent';

import component from 'omniscient';

class TestComponent extends Component {
    shouldComponentUpdate(nextProps, nextState) {
        return !(
            isEqualImmutable(this.props, nextProps) &&
            ((!oldState && !newState) ||
                isEqualImmutable(this.state, nextState))
        );
    }

    state = { i: 1 };

    render() {
        const { label } = this.props;
        return <h1>{label}</h1>;
    }
}",
}
`;
